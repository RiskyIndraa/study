name: Belajar CI/CD Python

on:
  push:
    branches:
      - main  # Akan berjalan setiap ada push ke branch "main"
      - main
      - main  # Akan berjalan setiap ada push ke branch "main"


jobs:
  install:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python 3.13
        uses: actions/setup-python@v2
        with:
          python-version: 3.13

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

  build-and-push:
    needs: install
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Verify AWS CLI installation
        run: aws --version

      - name: Debug AWS Credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws configure list
          aws sts get-caller-identity

      - name: Zip application for deployment
        run: zip -r application.zip . -x '*.git*'

      - name: Upload to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws s3 cp application.zip s3://${{ secrets.S3_BUCKET_NAME }}/deployments/application-${{ github.sha }}.zip

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Verify AWS CLI installation
        run: aws --version

      - name: Set timestamp for versioning
        run: echo "TIMESTAMP=$(date +%s)" >> $GITHUB_ENV


      - name: Set timestamp for versioning
        run: echo "TIMESTAMP=$(date +%s)" >> $GITHUB_ENV

      - name: Delete existing application version (if exists)
        continue-on-error: true
        run: |
          aws elasticbeanstalk delete-application-version \
            --application-name "${{ secrets.EB_APP_NAME }}" \
            --version-label "${{ github.sha }}" \
            --region "${{ secrets.AWS_REGION }}" \
            --no-delete-source-bundle

      - name: Deploy to Elastic Beanstalk

      - name: Set timestamp for versioning
        run: echo "TIMESTAMP=$(date +%s)" >> $GITHUB_ENV

      - name: Delete existing application version (if exists)
        run: |
          aws elasticbeanstalk delete-application-version \
            --application-name "${{ secrets.EB_APP_NAME }}" \
            --version-label "${{ github.sha }}" \
            --region "${{ secrets.AWS_REGION }}" \
            --no-delete-source-bundle || true

      - name: Wait for Elastic Beanstalk to be Ready
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "⏳ Waiting for Elastic Beanstalk to be Ready..."
          while true; do
            STATUS=$(aws elasticbeanstalk describe-environments --environment-names "${{ secrets.EB_ENV_NAME }}" --query "Environments[0].Status" --output text)
            echo "Current Status: $STATUS"
            if [ "$STATUS" == "Ready" ]; then
              echo "✅ Environment is Ready!"
              break
            fi
            echo "⏳ Environment is not Ready, waiting 30 seconds..."
            sleep 30
          done

      - name: Deploy to Elastic Beanstalk
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |

          VERSION_LABEL="${{ github.sha }}-${TIMESTAMP}"

          aws elasticbeanstalk create-application-version \
            --application-name "${{ secrets.EB_APP_NAME }}" \
            --version-label "$VERSION_LABEL" \
            --source-bundle S3Bucket="${{ secrets.S3_BUCKET_NAME }}",S3Key="deployments/application-${{ github.sha }}.zip" \
            --region "${{ secrets.AWS_REGION }}"

          aws elasticbeanstalk update-environment \
            --environment-name "${{ secrets.EB_ENV_NAME }}" \
            --version-label "$VERSION_LABEL"

      - name: Set Environment Variables in Elastic Beanstalk
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          aws elasticbeanstalk update-environment \
            --environment-name "${{ secrets.EB_ENV_NAME }}" \
            --option-settings Namespace=aws:elasticbeanstalk:application:environment,OptionName=API_GATEWAY_URL,Value="${{ secrets.API_GATEWAY_URL }}"
